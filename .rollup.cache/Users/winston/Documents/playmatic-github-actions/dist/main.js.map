{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAI,MAAM,eAAe,CAAC;AAEtC,mDAAmD;AACnD,MAAM,sBAAsB,GAAG,uCAAuC,CAAC,CAAC,0CAA0C;AAMlH;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,GAAG;IACvB,IAAI,CAAC;QACH,MAAM,MAAM,GAAW,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QACpE,MAAM,OAAO,GAAuB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,SAAS,CAAC;QAC3E,MAAM,aAAa,GACjB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,SAAS,CAAC;QAE/C,6DAA6D;QAC7D,IAAI,CAAC,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;YAC/B,IAAI,CAAC,SAAS,CAAC,yDAAyD,CAAC,CAAC;YAC1E,OAAO;QACT,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;QAC/B,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,uBAAuB;QACpD,IAAI,OAAO;YAAE,IAAI,CAAC,KAAK,CAAC,aAAa,OAAO,EAAE,CAAC,CAAC;QAChD,IAAI,aAAa;YAAE,IAAI,CAAC,KAAK,CAAC,mBAAmB,aAAa,EAAE,CAAC,CAAC;QAElE,MAAM,IAAI,GAA8B,EAAE,CAAC;QAC3C,IAAI,OAAO;YAAE,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;QAC1C,IAAI,aAAa;YAAE,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QAEtD,IAAI,CAAC,KAAK,CAAC,iBAAiB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEpD,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,sBAAsB,EAAE;YACnD,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,aAAa,EAAE,UAAU,MAAM,EAAE;aAClC;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;SAC3B,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;YACjB,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YACxC,IAAI,CAAC,SAAS,CACZ,kCAAkC,QAAQ,CAAC,MAAM,KAAK,SAAS,EAAE,CAClE,CAAC;YACF,OAAO;QACT,CAAC;QAED,MAAM,YAAY,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAqB,CAAC;QAEjE,IAAI,YAAY,EAAE,WAAW,EAAE,CAAC;YAC9B,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,YAAY,CAAC,WAAW,CAAC,CAAC;YAC1D,IAAI,CAAC,IAAI,CAAC,oCAAoC,YAAY,CAAC,WAAW,EAAE,CAAC,CAAC;QAC5E,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,SAAS,CACZ,yFAAyF,CAC1F,CAAC;QACJ,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,2CAA2C;QAC3C,IAAI,KAAK,YAAY,KAAK,EAAE,CAAC;YAC3B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAChC,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,SAAS,CAAC,4BAA4B,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["import * as core from \"@actions/core\";\n\n// Define a constant for the Playmatic API endpoint\nconst PLAYMATIC_API_ENDPOINT = \"https://api.playmatic.ai/v1/playtests\"; // This can be made configurable if needed\n\ninterface PlaytestResponse {\n  playtestUrl: string;\n}\n\n/**\n * The main function for the action.\n *\n * @returns Resolves when the action is complete.\n */\nexport async function run(): Promise<void> {\n  try {\n    const apiKey: string = core.getInput(\"api-key\", { required: true });\n    const testUrl: string | undefined = core.getInput(\"test-url\") || undefined;\n    const environmentId: string | undefined =\n      core.getInput(\"environment-id\") || undefined;\n\n    // Validate that either test-url or environment-id is present\n    if (!testUrl && !environmentId) {\n      core.setFailed(\"Either 'test-url' or 'environment-id' must be provided.\");\n      return;\n    }\n\n    core.debug(\"Inputs received:\");\n    core.debug(\"API Key: ****\"); // Mask API key in logs\n    if (testUrl) core.debug(`Test URL: ${testUrl}`);\n    if (environmentId) core.debug(`Environment ID: ${environmentId}`);\n\n    const body: { [key: string]: string } = {};\n    if (testUrl) body.entrypointUrl = testUrl;\n    if (environmentId) body.environmentId = environmentId;\n\n    core.debug(`Request body: ${JSON.stringify(body)}`);\n\n    const response = await fetch(PLAYMATIC_API_ENDPOINT, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify(body),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      core.setFailed(\n        `API request failed with status ${response.status}: ${errorText}`,\n      );\n      return;\n    }\n\n    const responseData = (await response.json()) as PlaytestResponse;\n\n    if (responseData?.playtestUrl) {\n      core.setOutput(\"playtest-link\", responseData.playtestUrl);\n      core.info(`Playtest successfully initiated: ${responseData.playtestUrl}`);\n    } else {\n      core.setFailed(\n        \"Failed to get playtest URL from API response or response did not match expected format.\",\n      );\n    }\n  } catch (error) {\n    // Fail the workflow run if an error occurs\n    if (error instanceof Error) {\n      core.setFailed(error.message);\n    } else {\n      core.setFailed(\"An unknown error occurred.\");\n    }\n  }\n}\n"]}